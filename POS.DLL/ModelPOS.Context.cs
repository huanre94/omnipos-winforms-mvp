//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace POS.DLL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class POSEntities : DbContext
    {
        public POSEntities()
            : base("name=POSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccountsReceivable> AccountsReceivable { get; set; }
        public virtual DbSet<Bank> Bank { get; set; }
        public virtual DbSet<BankCreditCard> BankCreditCard { get; set; }
        public virtual DbSet<Brand> Brand { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<ClosingCashLine> ClosingCashLine { get; set; }
        public virtual DbSet<ClosingCashMoney> ClosingCashMoney { get; set; }
        public virtual DbSet<ClosingCashTable> ClosingCashTable { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<CountCashLine> CountCashLine { get; set; }
        public virtual DbSet<CountCashMoney> CountCashMoney { get; set; }
        public virtual DbSet<CountCashTable> CountCashTable { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<CustomerType> CustomerType { get; set; }
        public virtual DbSet<EmissionPoint> EmissionPoint { get; set; }
        public virtual DbSet<IdentType> IdentType { get; set; }
        public virtual DbSet<InventLocation> InventLocation { get; set; }
        public virtual DbSet<InventProductLocation> InventProductLocation { get; set; }
        public virtual DbSet<InventTableModule> InventTableModule { get; set; }
        public virtual DbSet<InventTransType> InventTransType { get; set; }
        public virtual DbSet<InventUnit> InventUnit { get; set; }
        public virtual DbSet<InvoiceLine> InvoiceLine { get; set; }
        public virtual DbSet<InvoicePromotion> InvoicePromotion { get; set; }
        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<OrderLine> OrderLine { get; set; }
        public virtual DbSet<OrderPaymMode> OrderPaymMode { get; set; }
        public virtual DbSet<OrderPromotion> OrderPromotion { get; set; }
        public virtual DbSet<OrderText> OrderText { get; set; }
        public virtual DbSet<PaymMode> PaymMode { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductBarcode> ProductBarcode { get; set; }
        public virtual DbSet<ProductCategory> ProductCategory { get; set; }
        public virtual DbSet<ProductGroup> ProductGroup { get; set; }
        public virtual DbSet<PromotionCustomer> PromotionCustomer { get; set; }
        public virtual DbSet<PromotionPaymMode> PromotionPaymMode { get; set; }
        public virtual DbSet<PromotionProducts> PromotionProducts { get; set; }
        public virtual DbSet<PromotionReward> PromotionReward { get; set; }
        public virtual DbSet<PromotionTable> PromotionTable { get; set; }
        public virtual DbSet<Province> Province { get; set; }
        public virtual DbSet<Salesman> Salesman { get; set; }
        public virtual DbSet<Server> Server { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<Vendor> Vendor { get; set; }
        public virtual DbSet<CreditCard> CreditCard { get; set; }
        public virtual DbSet<InternalCreditCard> InternalCreditCard { get; set; }
        public virtual DbSet<InternalCreditCardLine> InternalCreditCardLine { get; set; }
        public virtual DbSet<InvoiceTable> InvoiceTable { get; set; }
        public virtual DbSet<Supervisor> Supervisor { get; set; }
        public virtual DbSet<TaxTable> TaxTable { get; set; }
        public virtual DbSet<OrderTable> OrderTable { get; set; }
        public virtual DbSet<PromotionType> PromotionType { get; set; }
        public virtual DbSet<GiftCardBlockTable> GiftCardBlockTable { get; set; }
        public virtual DbSet<GiftCardLine> GiftCardLine { get; set; }
        public virtual DbSet<GiftCardTable> GiftCardTable { get; set; }
        public virtual DbSet<GiftCardTemplateLine> GiftCardTemplateLine { get; set; }
        public virtual DbSet<GiftCardTemplateTable> GiftCardTemplateTable { get; set; }
        public virtual DbSet<GiftCardTrans> GiftCardTrans { get; set; }
        public virtual DbSet<InvoicePayment> InvoicePayment { get; set; }
    
        public virtual ObjectResult<SP_InternalCreditCard_Consult_Result> SP_InternalCreditCard_Consult(Nullable<long> internalCreditCardId, string barcode, string type, string cActivacion, string status)
        {
            var internalCreditCardIdParameter = internalCreditCardId.HasValue ?
                new ObjectParameter("InternalCreditCardId", internalCreditCardId) :
                new ObjectParameter("InternalCreditCardId", typeof(long));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var cActivacionParameter = cActivacion != null ?
                new ObjectParameter("CActivacion", cActivacion) :
                new ObjectParameter("CActivacion", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InternalCreditCard_Consult_Result>("SP_InternalCreditCard_Consult", internalCreditCardIdParameter, barcodeParameter, typeParameter, cActivacionParameter, statusParameter);
        }
    
        public virtual ObjectResult<SP_Supervisor_Validate_Result> SP_Supervisor_Validate(string barcode)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Supervisor_Validate_Result>("SP_Supervisor_Validate", barcodeParameter);
        }
    
        public virtual ObjectResult<SP_GaranCheck_Authorize_Result> SP_GaranCheck_Authorize(Nullable<int> bankId, string accountNumber, Nullable<int> ckeckNumber, Nullable<decimal> ckeckAmount, string identification, string name, string phone, string reference)
        {
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var ckeckNumberParameter = ckeckNumber.HasValue ?
                new ObjectParameter("CkeckNumber", ckeckNumber) :
                new ObjectParameter("CkeckNumber", typeof(int));
    
            var ckeckAmountParameter = ckeckAmount.HasValue ?
                new ObjectParameter("CkeckAmount", ckeckAmount) :
                new ObjectParameter("CkeckAmount", typeof(decimal));
    
            var identificationParameter = identification != null ?
                new ObjectParameter("Identification", identification) :
                new ObjectParameter("Identification", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GaranCheck_Authorize_Result>("SP_GaranCheck_Authorize", bankIdParameter, accountNumberParameter, ckeckNumberParameter, ckeckAmountParameter, identificationParameter, nameParameter, phoneParameter, referenceParameter);
        }
    
        public virtual ObjectResult<SP_GiftCard_Consult_Result> SP_GiftCard_Consult(string giftCardNumber)
        {
            var giftCardNumberParameter = giftCardNumber != null ?
                new ObjectParameter("GiftCardNumber", giftCardNumber) :
                new ObjectParameter("GiftCardNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GiftCard_Consult_Result>("SP_GiftCard_Consult", giftCardNumberParameter);
        }
    }
}
